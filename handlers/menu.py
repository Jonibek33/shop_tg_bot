from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from database.db_helper import db
from keyboards.main_keyboard import get_main_keyboard, get_back_keyboard

# Create router instance
router = Router()

@router.callback_query(F.data == "menu")
async def show_menu_categories(callback: CallbackQuery):
    """Show menu categories"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üëü –ö—Ä–æ—Å—Å–æ–≤–∫–∏", callback_data="–∫–∞—Ç–∏–≥–æ—Ä–∏—è_–∫—Ä–æ—Å—Å–æ–≤–∫–∏"),
            InlineKeyboardButton(text="üëï –§—É—Ç–±–æ–ª–∫–∏", callback_data="–∫–∞—Ç–∏–≥–æ—Ä–∏—è_—Ñ—É—Ç–±–æ–ª–∫–∏")
        ],
        [
            InlineKeyboardButton(text="üëñ –°–≤–∏—Ç–ø—ç–Ω—Ç—ã", callback_data="–∫–∞—Ç–∏–≥–æ—Ä–∏—è_—Å–≤–∏—Ç–ø—ç–Ω—Ç—ã"),
            InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")
        ]
    ])
    
    await callback.message.edit_text(
        "üè™ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>",
        reply_markup=keyboard
    )
    await callback.answer()

@router.callback_query(F.data.startswith("–∫–∞—Ç–∏–≥–æ—Ä–∏—è_"))
async def show_category_items(callback: CallbackQuery):
    """Show items in selected category"""
    category = callback.data.split("_")[1]
    items = db.get_menu_category(category)
    
    if not items:
        await callback.answer("–≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø—É—Å—Ç–∞!", show_alert=True)
        return
    
    keyboard_buttons = []
    text = f"üè™ <b>{category.title()}</b>\n\n"
    
    for item in items:

        # with open(f"images/{item['image']}", "rb") as img:
        #     await callback.message.answer_photo(
        #         photo=img,
        #         caption=f"<b>{item['name']}</b> - ${item['price']:.2f}\n<i>{item['description']}</i>",
        #         parse_mode="HTML"
        #     )

        text += f"<b>{item['name']}</b> - ${item['price']:.2f}\n"
        text += f"<i>{item['description']}</i>\n\n"
        
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"‚ûï –î–æ–±–∞–≤–∏—Ç—å {item['name']}", 
                callback_data=f"add_{item['id']}"
            )
        ])
    
    keyboard_buttons.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("add_"))
async def add_to_cart(callback: CallbackQuery):
    """Add item to cart"""
    item_id = int(callback.data.split("_")[1])
    item = db.get_item_by_id(item_id)
    
    if not item:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    db.add_to_cart(callback.from_user.id, item_id)
    
    await callback.answer(f"‚úÖ {item['name']} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!", show_alert=True)

@router.callback_query(F.data == "cart")
async def show_cart(callback: CallbackQuery):
    """Show user's cart"""
    cart = db.get_cart(callback.from_user.id)
    
    if not cart["items"]:
        await callback.message.edit_text(
            "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</b>\n\n"
            "–î–æ–±–∞–≤–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—É–Ω–∫—Ç—ã –∏–∑ –º–µ–Ω—é!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè™ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é", callback_data="menu")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
            ])
        )
        await callback.answer()
        return
    
    text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
    total = 0
    
    for item_id, quantity in cart["items"].items():
        item = db.get_item_by_id(int(item_id))
        if item:
            item_total = item["price"] * quantity
            total += item_total
            text += f"<b>{item['name']}</b>\n"
            text += f"${item['price']:.2f} x {quantity} = ${item_total:.2f}\n\n"
    
    delivery_fee = db.data.get("settings", {}).get("delivery_fee", 2.50)
    text += f"<b>–ò—Ç–æ–≥–æ:</b> ${total:.2f}\n"
    text += f"<b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> ${delivery_fee:.2f}\n"
    text += f"<b>–û–±—â–∏–π:</b> ${total + delivery_fee:.2f}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="checkout"),
            InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")
        ],
        [
            InlineKeyboardButton(text="üè™ –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤", callback_data="menu"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")
        ]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "clear_cart")
async def clear_cart(callback: CallbackQuery):
    """Clear user's cart"""
    db.clear_cart(callback.from_user.id)
    await callback.answer("üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!", show_alert=True)
    await show_cart(callback)

@router.callback_query(F.data == "checkout")
async def checkout(callback: CallbackQuery):
    """Process checkout"""
    cart = db.get_cart(callback.from_user.id)
    
    if not cart["items"]:
        await callback.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", show_alert=True)
        return
    
    # Here you would integrate with payment systems
    # For now, we'll just show order confirmation
    
    order_text = "üéâ <b>–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n\n"
    order_text += "üìû –ú—ã –ø–æ–∑–≤–æ–Ω–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∏.\n"
    order_text += "‚è±Ô∏è –†–∞—Å—á–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: 30-45 –º–∏–Ω—É—Ç.\n\n"
    order_text += "<b>–°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞:</b>\n"
    
    for item_id, quantity in cart["items"].items():
        item = db.get_item_by_id(int(item_id))
        if item:
            order_text += f"‚Ä¢ {item['name']} x{quantity}\n"
    
    delivery_fee = db.data.get("settings", {}).get("delivery_fee", 2.50)
    order_text += f"\n<b>–û–±—â–∏–π: ${cart['total'] + delivery_fee:.2f}</b>"
    
    # Clear the cart after order
    db.clear_cart(callback.from_user.id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back")]
    ])
    
    await callback.message.edit_text(order_text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "contact")
async def show_contact(callback: CallbackQuery):
    """Show contact information"""
    contact_text = """
üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>

üì± –¢–µ–ª–µ—Ñ–æ–Ω: +1 (555) 123-4567
üìß Email: info@styleshop.com
üåê Website: www.styleshop.com

<b>–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—Å:</b>
üìò Facebook: @styleshop
üì∑ Instagram: @styleshop
üê¶ Twitter: @styleshop
    """
    
    await callback.message.edit_text(
        contact_text,
        reply_markup=get_back_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "location")
async def show_location(callback: CallbackQuery):
    """Show restaurant location"""
    await callback.message.edit_text(
        "üìç <b>–ù–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</b>\n\n"
        "123 –ì–ª–∞–≤–Ω–∞—è —É–ª–∏—Ü–∞\n"
        "–¶–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞, –®—Ç–∞—Ç 12345\n\n"
        "–ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Å–∞–º–æ–º —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞!",
        reply_markup=get_back_keyboard()
    )
    # Send actual location
    await callback.message.answer_location(
        latitude=40.7128,  # Replace with actual coordinates
        longitude=-74.0060
    )
    await callback.answer()

@router.callback_query(F.data == "hours")
async def show_hours(callback: CallbackQuery):
    """Show opening hours"""
    hours_text = """
‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã</b>

<b>–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ß–µ—Ç–≤–µ—Ä–≥:</b> 11:00 AM - 10:00 PM
<b>–ü—è—Ç–Ω–∏—Ü–∞ - –°—É–±–±–æ—Ç–∞:</b> 11:00 AM - 11:00 PM
<b>–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ:</b> 12:00 PM - 9:00 PM

<b>–ú–∞–∑–∞–∑–∏–Ω –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è.</b>
    """
    
    await callback.message.edit_text(
        hours_text,
        reply_markup=get_back_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "back")
async def go_back(callback: CallbackQuery):
    """Go back to main menu"""
    await callback.message.edit_text(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {callback.from_user.full_name}!\n\n"
        f"–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()